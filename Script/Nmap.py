import datetime
import subprocess
import xml.etree.ElementTree as ET
from pymongo import MongoClient


class Nmap:
    def __init__(self, target: str, output_file: str = 'Result/nmap.xml'):
        self.scan(target, output_file)
        self.mongo_insert(self.parse_xml())

    def scan(self, target, output_file):
        command = f'sudo nmap -sU -sC -sV -O --osscan-limit --top-ports 100 -oX {output_file}'
        subprocess.run(f'{command} {target}', shell=True)

    def parse_xml(self, filename: str = 'Result/nmap.xml'):
        try:
            return self.get_host_data(filename)
        except Exception as error:
            print(f"Error parsing XML file: {error}")
            return None

    def get_host_data(self, filename):
        tree = ET.parse(filename)
        root = tree.getroot()

        host_data = []
        hosts = root.findall('host')
        for host in hosts:
            addr_info = []

            # Ignore hosts that are not 'up'
            if not host.findall('status')[0].attrib['state'] == 'up':
                continue

            # Get IP address and host info. If no hostname, then ''
            ip_address = host.findall('address')[0].attrib['addr']
            host_name_element = host.findall('hostnames')
            try:
                host_name = host_name_element[0].findall('hostname')[0].attrib['name']
            except IndexError:
                host_name = ''

            # Get the OS information if available
            try:
                os_element = host.findall('os')
                os_name = os_element[0].findall('osmatch')[0].attrib['name']
            except IndexError:
                os_name = ''

            # Get information on ports and services
            try:
                port_element = host.findall('ports')
                ports = port_element[0].findall('port')
                for port in ports:
                    port_data = []

                    proto = port.attrib['protocol']
                    port_id = port.attrib['portid']
                    service = port.findall('service')[0].attrib['name']
                    try:
                        product = port.findall('service')[0].attrib['product']
                    except (IndexError, KeyError):
                        product = ''
                    try:
                        servicefp = port.findall('service')[0].attrib['servicefp']
                    except (IndexError, KeyError):
                        servicefp = ''
                    try:
                        script_id = port.findall('script')[0].attrib['id']
                    except (IndexError, KeyError):
                        script_id = ''
                    try:
                        script_output = port.findall('script')[0].attrib['output']
                    except (IndexError, KeyError):
                        script_output = ''

                    # Create a list of the port data
                    port_data.extend((ip_address, host_name, os_name,
                                      proto, port_id, service, product,
                                      servicefp, script_id, script_output))

                    # Add the port data to the host data
                    host_data.append(port_data)

            # If no port information, just create a list of host information
            except IndexError:
                addr_info.extend((ip_address, host_name, '', '', '', '', '', '', '', ''))
                host_data.append(addr_info)

        return host_data

    def mongo_insert(self, data):
        client = MongoClient('mongodb://localhost:27017/')
        db = client['vulnmgt']

        for item in data:
            db.hosts.update_one({'ip': item[0], 'port': item[4], 'proto': item[3]},
                                {'$set': {'ip': item[0], 'hostname': item[1], 'os': item[2],
                                          'protocol': item[3], 'port': item[4], 'service': item[5],
                                          'product': item[6], 'servicefp': item[7], 'script': item[8],
                                          'script_output': item[9], 'scan_date': datetime.datetime.utcnow()}},
                                upsert=True)
