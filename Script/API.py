import ipaddress
from bson.json_util import dumps
from flask import Flask, jsonify, request, render_template
from pymongo import MongoClient
from Script import CleanUp, Report
from Script.GVM import OpenVAS
from Script.Nmap import Nmap

client = MongoClient('mongodb://localhost:27017')
db = client['vulnmgt']

app = Flask(__name__, static_folder='../Resource', template_folder='../Resource')


@app.route('/')
def index():
    return render_template('index.html', image_file='../Resource/nier-cyberpunk.jpg')


@app.route('/api/hosts/<host>', methods=['GET'])
def get_host_data(host):
    try:
        ipaddress.ip_address(host)
        response = db.hosts.find_one({'ip': host})
        if response:
            return jsonify(code=200, data=dumps(response))
        else:
            return jsonify(code=404, data='Host not found')
    except ValueError as e:
        return jsonify(code=400, data='Bad request: ' + str(e))


@app.route('/api/hosts', methods=['GET'])
def list_hosts():
    hosts = db.hosts.distinct('ip')
    response = [{'count': len(hosts), 'data': hosts}]
    return jsonify(code=200, data=dumps(response))


@app.route('/api/cves', methods=['GET'])
def list_cves():
    cves = db.vulnerabilities.distinct('cve')
    if 'NOCVE' in cves:
        cves.remove('NOCVE')
    response = [{'count': len(cves), 'data': cves}]
    return jsonify(code=200, data=dumps(response))


@app.route('/api/cleanup', methods=['POST'])
def clean_up():
    CleanUp.clean_up()
    return jsonify(code=200, data='Clean up complete')


@app.route('/api/run', methods=['POST'])
def run_scan():
    if not request.json or not 'target' in request.json:
        return jsonify(code=400, data='Bad request')
    target = request.json['target']
    username, password = request.json['username'], request.json['password']
    try:
        print('Running Nmap scan...')
        Nmap(target=target)
        print('Nmap scan complete')

        print('Running OpenVAS scan...')
        OpenVAS(target=target, username=username, password=password)
        print('OpenVAS scan complete')
        return jsonify(code=200, data='Scan complete')
    except Exception as e:
        return jsonify(code=500, data='Scan failed: ' + str(e))


@app.route('/api/report', methods=['POST'])
def generate_report():
    if not request.json or not 'type' in request.json:
        return jsonify(code=400, data='Invalid request')
    report_type = request.json['type']
    report_path = request.json['path']
    if report_type == 'csv':
        Report.report_csv(report_path)
    elif report_type == 'html':
        Report.report_html(report_path)
    else:
        return jsonify(code=400, data='Invalid report type')
    return jsonify(code=201, data='Report created')


def main():
    app.run(debug=True, port=50000)
