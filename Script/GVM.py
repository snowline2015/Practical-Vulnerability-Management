import subprocess
import time
import datetime
import xml.etree.ElementTree as ET
from pymongo import MongoClient

config = {
    'Base': 'd21f6c81-2b88-4ac1-b7b4-a2a9f2ad4663',
    'Discovery': '8715c877-47a0-438d-98a3-27c7a6ab2196',
    'Empty': '085569ce-73ed-11df-83c3-002264764cea',
    'EulerOS Linux Security Configuration': '0362e8f6-d7cc-4a12-8768-5f2406713860',
    'Full and fast': 'daba56c8-73ec-11df-a475-002264764cea',
    'GaussDB 100 V300R001C00 Security Hardening Guide (Standalone)': '61327f09-8a54-4854-9e1c-16798285fb28',
    'GaussDB Kernel V500R001C00 Security Hardening Guide': '2eec8313-fee4-442a-b3c4-fa0d5dc83d61',
    'Host Discovery': '2d3f051c-55ba-11e3-bf43-406186ea4fc5',
    'Huawei Datacom Product Security Configuration Audit Guide': 'aab5c4a1-eab1-4f4e-acac-8c36d08de6bc',
    'IT-Grundschutz Kompendium': 'c4b7c0cb-6502-4809-b034-8e635311b3e6'
}

scanner = {
    'CVE': '6acd0832-df90-11e4-b9d5-28d24461215b',
    'OpenVAS Default': '08b69003-5fc2-4037-a479-93b440211c73'
}

port_lists = {
    'All IANA assigned TCP': '33d0cd82-57c6-11e1-8ed1-406186ea4fc5',
    'All IANA assigned TCP and UDP': '4a4717fe-57d2-11e1-9a26-406186ea4fc5',
    'All TCP and Nmap top 100 UDP': '730ef368-57e2-11e1-a90f-406186ea4fc5'
}


class OpenVAS:
    def __init__(self, username: str, password: str, target: str):
        self.BASE_CMD = f'sudo -u _gvm gvm-cli --gmp-username {username} --gmp-password {password} socket --xml'
        self.mongo_insert(self.scan(target))

    def scan(self, target: str):
        # Create target
        res = subprocess.run(f'{self.BASE_CMD} "<create_target><name>{target}</name><hosts>{target}</hosts>'
                             fr'<port_list id=\"{port_lists["All IANA assigned TCP and UDP"]}\"/>'
                             f'<port_range>1-65535</port_range></create_target>"',
                             text=True, shell=True, capture_output=True)
        target_id = res.stdout.split('id="')[1].split('"')[0]

        # Create task
        res = subprocess.run(fr'{self.BASE_CMD} "<create_task><name>{target}</name><target id=\"{target_id}\"/>'
                             fr'<config id=\"{config["Full and fast"]}\"/>'
                             fr'<scanner id=\"{scanner["OpenVAS Default"]}\"/></create_task>"',
                             text=True, shell=True, capture_output=True)
        task_id = res.stdout.split('id="')[1].split('"')[0]

        # Start task
        res = subprocess.run(fr'{self.BASE_CMD} "<start_task task_id=\"{task_id}\"/>"',
                             text=True, shell=True, capture_output=True)
        report_id = ET.fromstring(res.stdout).find('report_id').text

        # Get task status
        while True:
            time.sleep(5)
            res = subprocess.run(fr'{self.BASE_CMD} "<get_tasks task_id=\"{task_id}\"/>"',
                                 text=True, shell=True, capture_output=True)
            if ET.fromstring(res.stdout).find('task').find('status').text == 'Done':
                break

        # Get report
        res = subprocess.run(fr'{self.BASE_CMD} "<get_reports report_id=\"{report_id}\"'
                             r' details=\"true\" notes_details=\"true\" overrides_details=\"true\" ignore_pagination=\"true\"/>"',
                             text=True, shell=True, capture_output=True)
        return res.stdout

    def parse_xml(self, xml: str):
        root = ET.fromstring(xml)
        res = {}
        for reports in root.findall('report'):
            for report in reports.findall('report'):
                for results in report.findall('results'):
                    for result in results.findall('result'):

                        # Ignore nested results
                        if result.find("host") is None:
                            continue

                        if result.find('name').text not in res:
                            res[result.find('name').text] = []

                        ipaddress = result.find("host").text
                        description = result.find('description').text
                        port, proto = result.find("port").text.split('/')

                        # Parse the NVT (Network Vulnerability Tests) data
                        nvtblock = result.find("nvt")

                        oid = nvtblock.get("oid")
                        nvt_name = nvtblock.find("name").text
                        nvt_family = nvtblock.find("family").text

                        # Ignore vulns whose cvss is 0
                        cvss = float(nvtblock.find("cvss_base").text)
                        if cvss == 0:
                            continue
                        nvt_bid = nvtblock.find("bid").text.split(", ") if nvtblock.find("bid") is not None else []
                        nvt_xref = nvtblock.find("xref").text.split(", ") if nvtblock.find("xref") is not None else []

                        cve = []
                        try:
                            refs = nvtblock.find("refs").findall("ref")
                            for ref in refs:
                                if ref.get('type') == "cve":
                                    cve.append(ref.get('id'))
                        except:
                            pass

                        tags_data = {}
                        tags = nvtblock.find("tags").text.split("|")
                        for item in tags:
                            tag_name, tag_value = item.split("=", 1)
                            tags_data[tag_name] = tag_value
                        threat = result.find("threat").text

                        # if ipaddress not in oidList.keys():
                        #     oidList[ipaddress] = []
                        # oidList[ipaddress].append({'proto': proto, 'port': port, 'oid': oid})

                        res[result.find('name').text].append({
                            'ipaddress': ipaddress,
                            'port': port,
                            'proto': proto,
                            'description': description,
                            'oid': oid,
                            'nvt_name': nvt_name,
                            'nvt_family': nvt_family,
                            'cvss': cvss,
                            'nvt_bid': nvt_bid,
                            'nvt_xref': nvt_xref,
                            'cve': cve,
                            'tags_data': tags_data,
                            'threat': threat,
                        })
        return res

    def mongo_insert(self, data):
        client = MongoClient('mongodb://localhost:27017/')
        db = client['vulnmgt']

        for vuln in data:
            for item in data[vuln]:
                if db.hosts.find({'ip_address': item['ipaddress'], 'port': item['port'], 'proto': item['proto'], 'vuln.name': vuln}):
                    db.hosts.update_one({'ip': item['ipaddress'], 'port': item['port'], 'proto': item['proto']},
                                        {'$set': {'scan_date': datetime.datetime.utcnow()},
                                         '$push': {'vuln': {'name': vuln,
                                                            'description': item['description'], 'oid': item['oid'],
                                                            'nvt_name': item['nvt_name'], 'nvt_family': item['nvt_family'],
                                                            'nvt_bid': item['nvt_bid'], 'nvt_xref': item['nvt_xref'],
                                                            'cve': item['cve'], 'cvss': item['cvss'],
                                                            'tags_data': item['tags_data'], 'threat': item['threat']}}},
                                        upsert=True)
                else:
                    db.hosts.update_one({'ip_address': item['ipaddress'], 'port': item['port'], 'proto': item['proto'], 'vuln.name': vuln},
                                        {'$set': {'scan_date': datetime.datetime.utcnow()},
                                            'vuln.$.description': item['description'], 'vuln.$.oid': item['oid'],
                                            'vuln.$.nvt_name': item['nvt_name'], 'vuln.$.nvt_family': item['nvt_family'],
                                            'vuln.$.nvt_bid': item['nvt_bid'], 'vuln.$.nvt_xref': item['nvt_xref'],
                                            'vuln.$.cve': item['cve'], 'vuln.$.cvss': item['cvss'],
                                            'vuln.$.tags_data': item['tags_data'], 'vuln.$.threat': item['threat']},
                                        upsert=True)


if __name__ == '__main__':
    openvas = OpenVAS('yorha', '8fc1760a-c52d-411c-b7cd-88380b79e060')
