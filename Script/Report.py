import os
from pymongo import MongoClient
import datetime
import csv
import json

client = MongoClient('mongodb://localhost:27017')
db = client['vulnmgt']
cve_search = client['cvedb']

cve_searchsploit = json.load(open('Database/exploitdb_mapping_cve.json'))

data = [['IP Address', 'Hostname', 'Port', 'Protocol', 'OS', 'Service', 'Product',
         'Vulnerability', 'Category', 'Severity', 'CVE', 'CVE Summary', 'CVE CVSS',
         'CVE Impact Availability', 'CVE Impact Confidentiality', 'CVE Impact Integrity',
         'CVE Access Vector', 'CVE Access Complexity', 'CVE Authentication', 'ExploitDB', 'CVSS',
         'Description', 'NVT BID', 'NVT XREF', 'Tags', 'Scan Date']]


def get_data():
    for host in db.hosts.distinct('ip_address'):
        details = db.hosts.find({'ip_address': host})
        for detail in details:
            host_data = [detail['ip_address'], detail['host_name'], detail['port'], detail['protocol'],
                         detail['os'], detail['service'], detail['product']]

            for vuln in detail['vuln']:

                cve_data = []
                for cve in vuln['cve']:
                    cve_details = cve_search.cves.find_one({'id': cve})
                    if cve_details:
                        if "impact" not in cve_details:
                            cve_details["impact"] = {"availability": None, "confidentiality": None,
                                                     "integrity": None}
                        if "access" not in cve_details:
                            cve_details["access"] = {"authentication": None, "complexity": None, "vector": None}
                        if "cvss" not in cve_details:
                            cve_details["cvss"] = None

                        cve_data.append([cve_details['id'], cve_details['summary'], cve_details['cvss'],
                                         cve_details['impact']['availability'], cve_details['impact']['confidentiality'],
                                         cve_details['impact']['integrity'], cve_details['access']['authentication'],
                                         cve_details['access']['complexity'], cve_details['access']['vector'],
                                         '\n'.join([f'https://www.exploit-db.com/exploits/{exploit}'
                                                    for exploit in cve_searchsploit[cve]] if cve in cve_searchsploit else [])])
                    else:
                        cve_data.append([cve, '', '', '', '', '', '', '', '',
                                         '\n'.join([f'https://www.exploit-db.com/exploits/{exploit}'
                                                    for exploit in cve_searchsploit[cve]] if cve in cve_searchsploit else [])])

                for cve in cve_data:
                    vuln_detail = [vuln['nvt_name'], vuln['nvt_family'], vuln['threat']] + cve + \
                                  [vuln['cvss'], vuln['description'], vuln['nvt_bid'], vuln['nvt_xref'],
                                   '\n'.join([f'{k} | {v}' for k, v in vuln['tags_data'].items()]),
                                   detail['scan_date']]
                    data.append(host_data + vuln_detail)
    return data


def report_csv(path: str = 'Report'):
    if not os.path.exists(path):
        os.makedirs(path)
    timestamp = datetime.datetime.now().timestamp()
    with open(f'{path}/report_{timestamp}.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(get_data())
    print(f'CSV report saved to {path}/report_{timestamp}.csv')


def report_html(path: str = 'Report'):
    if not os.path.exists(path):
        os.makedirs(path)
    timestamp = datetime.datetime.now().timestamp()
    with open(f'{path}/report_{timestamp}.html', 'w') as file:
        file.write('<html><head><title>Report</title></head><body><table>')
        for row in get_data():
            file.write('<tr>')
            for column in row:
                file.write(f'<td>{column}</td>')
            file.write('</tr>')
        file.write('</table></body></html>')
    print(f'HTML report saved to {path}/report_{timestamp}.html')
