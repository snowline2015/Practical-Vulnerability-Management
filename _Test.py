import datetime
import pymongo
import json
from xml.etree import ElementTree as ET

import requests

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
db = myclient["yorha"]

# mydict = { "project": "YoRHa", "name": "2B" }
# x = db.army.insert_one(mydict)
# x = db.army.insert_one(mydict)

# db.army.update_one({'project': 'YoRHa', 'name': 'WTF'},
#                     {'$set': {'project': 'YoRHa', 'type': 'Android'},
#                     }, upsert=True)

# db.army.update_one({'project': 'YoRHa', 'name': '9S'},
#                    {'$push': {'weapon': {'name': 'Machine Gun', 'type': 'Machine Gun'}},
#                     '$setOnInsert': {'project': 'YoRHa', 'name': '9S', 'weapon': [{'name': 'Machine Gun', 'type': 'Machine Gun'}]}},
#                      upsert=True)

# db.hosts.update_one({'project': 'YoRHa', 'name': '2B', 'weapon.$},

# db.army.drop()

# for x in db.army.find():
#     print(x)

# ok = db.army.distinct('project')
# haha = 0

# xml_string = open('Result/gvm.xml').read()
# root = ET.fromstring(xml_string)
#
# res = {}
# oidList = {}
# for reports in root.findall('report'):
#     for report in reports.findall('report'):
#         for results in report.findall('results'):
#             for result in results.findall('result'):
#
#                 # Ignore nested results
#                 if result.find("host") is None:
#                     continue
#
#                 if result.find('name').text not in res:
#                     res[result.find('name').text] = []
#
#                 ipaddress = result.find("host").text
#                 description = result.find('description').text
#                 port, proto = result.find("port").text.split('/')
#
#                 # Parse the NVT (Network Vulnerability Tests) data
#                 nvtblock = result.find("nvt")
#
#                 oid = nvtblock.get("oid")
#                 nvt_name = nvtblock.find("name").text
#                 nvt_family = nvtblock.find("family").text
#
#                 # Ignore vulns whose cvss is 0
#                 cvss = float(nvtblock.find("cvss_base").text)
#                 if cvss == 0:
#                     continue
#                 nvt_bid = nvtblock.find("bid").text.split(", ") if nvtblock.find("bid") is not None else []
#                 nvt_xref = nvtblock.find("xref").text.split(", ") if nvtblock.find("xref") is not None else []
#
#                 cve = []
#                 try:
#                     refs = nvtblock.find("refs").findall("ref")
#                     for ref in refs:
#                         if ref.get('type') == "cve":
#                             cve.append(ref.get('id'))
#                 except:
#                     pass
#
#                 tags_data = {}
#                 tags = nvtblock.find("tags").text.split("|")
#                 for item in tags:
#                     tag_name, tag_value = item.split("=", 1)
#                     tags_data[tag_name] = tag_value
#                 threat = result.find("threat").text
#                 updated = datetime.datetime.utcnow()
#
#                 if ipaddress not in oidList.keys():
#                     oidList[ipaddress] = []
#                 oidList[ipaddress].append({'proto': proto, 'port': port, 'oid': oid})
#
#                 res[result.find('name').text].append({
#                     'ipaddress': ipaddress,
#                     'port': port,
#                     'proto': proto,
#                     'description': description,
#                     'oid': oid,
#                     'nvt_name': nvt_name,
#                     'nvt_family': nvt_family,
#                     'cvss': cvss,
#                     'nvt_bid': nvt_bid,
#                     'nvt_xref': nvt_xref,
#                     'cve': cve,
#                     'tags_data': tags_data,
#                     'threat': threat,
#                     'updated': updated
#                 })
# #
# for vuln in res:
#     for item in res[vuln]:
#         ok = 0

# cve = 'CVE-2003-0605'
# cve_searchsploit = json.load(open('Database/exploitdb_mapping_cve.json'))
# temp = '\n'.join([f'https://www.exploit-db.com/exploits/{exploit}' for exploit in cve_searchsploit[cve]] if cve in cve_searchsploit else [])
# print(temp)


# from Script import Nmap
# Nmap.Nmap.mongo_insert(None, Nmap.Nmap.get_host_data(None, 'Result/nmap.xml'))
# ok = 0

# from Script import GVM
# GVM.OpenVAS.mongo_insert(None, GVM.OpenVAS.parse_xml(None, open('Result/gvm.xml').read()))

xml = """<get_targets_response status="200" status_text="OK"><target id="c2b2112f-a8a0-4ea9-ba66-b203ef8c8aae"><owner><name>yorha</name></owner><name>192.168.183.0/24</name><comment></comment><creation_time>2023-01-01T19:27:55Z</creation_time><modification_time>2023-01-01T19:27:55Z</modification_time><writable>1</writable><in_use>1</in_use><permissions><permission><name>Everything</name></permission></permissions><hosts>192.168.183.0/24</hosts><exclude_hosts></exclude_hosts><max_hosts>254</max_hosts><port_list id="4a4717fe-57d2-11e1-9a26-406186ea4fc5"><name>All IANA assigned TCP and UDP</name><trash>0</trash></port_list><ssh_credential id=""><name></name><port></port><trash>0</trash></ssh_credential><smb_credential id=""><name></name><trash>0</trash></smb_credential><esxi_credential id=""><name></name><trash>0</trash></esxi_credential><snmp_credential id=""><name></name><trash>0</trash></snmp_credential><ssh_elevate_credential id=""><name></name><trash>0</trash></ssh_elevate_credential><reverse_lookup_only>0</reverse_lookup_only><reverse_lookup_unify>0</reverse_lookup_unify><alive_tests>Scan Config Default</alive_tests><allow_simultaneous_ips>1</allow_simultaneous_ips></target><filters id=""><term>name= 192.168.183.0/24 first=1 rows=10 sort=name</term><keywords><keyword><column>name</column><relation>=</relation><value></value></keyword><keyword><column></column><relation>~</relation><value>192.168.183.0/24</value></keyword><keyword><column>first</column><relation>=</relation><value>1</value></keyword><keyword><column>rows</column><relation>=</relation><value>10</value></keyword><keyword><column>sort</column><relation>=</relation><value>name</value></keyword></keywords></filters><sort><field>name<order>ascending</order></field></sort><targets start="1" max="10"/><target_count>1<filtered>1</filtered><page>1</page></target_count></get_targets_response>"""
import xml.etree.ElementTree as ET
root = ET.fromstring(xml)
target_id = root.findall('target')[0].attrib['id']
ok = 0
