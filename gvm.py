import subprocess
import time


class OpenVAS:
    def start_service(self):
        subprocess.run('systemctl start redis-server@openvas.service', shell=True)
        subprocess.run('sudo gvm-start', shell=True)

    def scan(self, target: str):
        base_cmd = 'gvm-cli --gmp-username admin --gmp-password admin --xml'
        # Create target
        res = subprocess.run(f'{base_cmd} "<create_target><name>{target}</name><hosts>{target}</hosts></create_target>"',
                             text=True, shell=True, capture_output=True)
        target_id = res.stdout.split('id="')[1].split('"')[0]

        # Create task
        res = subprocess.run(f'{base_cmd} "<create_task><name>{target}</name><target id=\"{target_id}\"/>'
                             f'<config id=\"daba56c8-73ec-11df-a475-002264764cea\"/>'
                             f'<scanner id=\"08b69003-5fc2-4037-a479-93b440211c73\"/></create_task>"',
                             text=True, shell=True, capture_output=True)
        task_id = res.stdout.split('id="')[1].split('"')[0]

        # Start task
        res = subprocess.run(f'{base_cmd} "<start_task task_id=\"{task_id}\"/>"', text=True, shell=True, capture_output=True)
        report_id = res.stdout.split('id="')[1].split('"')[0]

        # Get task status
        while True:
            time.sleep(5)
            res = subprocess.run(f'{base_cmd} "<get_tasks task_id=\"{task_id}\"/>"', text=True, shell=True, capture_output=True)
            if res.stdout.split('status="')[1].split('"')[0] == 'Done':
                break

        # Get report
        res = subprocess.run(f'{base_cmd} "<get_reports report_id=\"{report_id}\"/>"', text=True, shell=True, capture_output=True)
        return res.stdout

    def parse_xml(self, xml: str):
        import xml.etree.ElementTree as ET
        root = ET.fromstring(xml)
        for report in root.findall('report'):
            report_id = report.attrib['id']
            for result in report.findall('result'):
                result_id = result.attrib['id']
                result_name = result.find('name').text
                result_description = result.find('description').text
                result_severity = result.find('severity').text
                result_qod = result.find('qod').attrib['value']
                result_nvt = result.find('nvt')
                result_nvt_name = result_nvt.find('name').text
                result_nvt_oid = result_nvt.find('oid').text
                result_nvt_family = result_nvt.find('family').text
                result_nvt_cve = result_nvt.find('cve').text
                result_nvt_bid = result_nvt.find('bid').text
                result_nvt_xref = result_nvt.find('xref').text
                result_nvt_tags = result_nvt.find('tags').text
                result_nvt_solution = result_nvt.find('solution').text
                result_nvt_refs = result_nvt.find('refs')
                result_nvt_refs_ref = result_nvt_refs.findall('ref')
                result_nvt_refs_ref_type = result_nvt_refs_ref[0].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[0].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[1].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[1].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[2].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[2].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[3].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[3].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[4].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[4].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[5].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref








