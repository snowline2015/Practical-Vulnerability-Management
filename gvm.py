import subprocess
import time
import xml.etree.ElementTree as ET
from pymongo import MongoClient

config = {
    'Base': 'd21f6c81-2b88-4ac1-b7b4-a2a9f2ad4663',
    'Discovery': '8715c877-47a0-438d-98a3-27c7a6ab2196',
    'Empty': '085569ce-73ed-11df-83c3-002264764cea',
    'EulerOS Linux Security Configuration': '0362e8f6-d7cc-4a12-8768-5f2406713860',
    'Full and fast': 'daba56c8-73ec-11df-a475-002264764cea',
    'GaussDB 100 V300R001C00 Security Hardening Guide (Standalone)': '61327f09-8a54-4854-9e1c-16798285fb28',
    'GaussDB Kernel V500R001C00 Security Hardening Guide': '2eec8313-fee4-442a-b3c4-fa0d5dc83d61',
    'Host Discovery': '2d3f051c-55ba-11e3-bf43-406186ea4fc5',
    'Huawei Datacom Product Security Configuration Audit Guide': 'aab5c4a1-eab1-4f4e-acac-8c36d08de6bc',
    'IT-Grundschutz Kompendium': 'c4b7c0cb-6502-4809-b034-8e635311b3e6'
}

scanner = {
    'CVE': '6acd0832-df90-11e4-b9d5-28d24461215b',
    'OpenVAS Default': '08b69003-5fc2-4037-a479-93b440211c73'
}

port_lists = {
    'All IANA assigned TCP': '33d0cd82-57c6-11e1-8ed1-406186ea4fc5',
    'All IANA assigned TCP and UDP': '4a4717fe-57d2-11e1-9a26-406186ea4fc5',
    'All TCP and Nmap top 100 UDP': '730ef368-57e2-11e1-a90f-406186ea4fc5'
}


class OpenVAS:
    def __init__(self, username: str, password: str):
        self.BASE_CMD = f'sudo -u _gvm gvm-cli --gmp-username {username} --gmp-password {password} socket --xml'

    def scan(self, target: str):
        # Create target
        res = subprocess.run(f'{self.BASE_CMD} "<create_target><name>{target}</name><hosts>{target}</hosts>'
                             fr'<port_list id=\"{port_lists["All IANA assigned TCP and UDP"]}\"/>'
                             f'<port_range>1-65535</port_range></create_target>"',
                             text=True, shell=True, capture_output=True)
        target_id = res.stdout.split('id="')[1].split('"')[0]

        # Create task
        res = subprocess.run(fr'{self.BASE_CMD} "<create_task><name>{target}</name><target id=\"{target_id}\"/>'
                             fr'<config id=\"{config["Full and fast"]}\"/>'
                             fr'<scanner id=\"{scanner["OpenVAS Default"]}\"/></create_task>"',
                             text=True, shell=True, capture_output=True)
        task_id = res.stdout.split('id="')[1].split('"')[0]

        # Start task
        res = subprocess.run(fr'{self.BASE_CMD} "<start_task task_id=\"{task_id}\"/>"',
                             text=True, shell=True, capture_output=True)
        report_id = ET.fromstring(res.stdout).find('report_id').text

        # Get task status
        while True:
            time.sleep(5)
            res = subprocess.run(fr'{self.BASE_CMD} "<get_tasks task_id=\"{task_id}\"/>"',
                                 text=True, shell=True, capture_output=True)
            if ET.fromstring(res.stdout).find('task').find('status').text == 'Done':
                break

        # Get report
        res = subprocess.run(fr'{self.BASE_CMD} "<get_reports report_id=\"{report_id}\"/> detail=\"1\"',
                             text=True, shell=True, capture_output=True)
        return res.stdout

    def parse_xml(self, xml: str):
        root = ET.fromstring(xml)
        for report in root.findall('report'):
            report_id = report.attrib['id']
            for result in report.findall('result'):
                result_id = result.attrib['id']
                result_name = result.find('name').text
                result_description = result.find('description').text
                result_severity = result.find('severity').text
                result_qod = result.find('qod').attrib['value']
                result_nvt = result.find('nvt')
                result_nvt_name = result_nvt.find('name').text
                result_nvt_oid = result_nvt.find('oid').text
                result_nvt_family = result_nvt.find('family').text
                result_nvt_cve = result_nvt.find('cve').text
                result_nvt_bid = result_nvt.find('bid').text
                result_nvt_xref = result_nvt.find('xref').text
                result_nvt_tags = result_nvt.find('tags').text
                result_nvt_solution = result_nvt.find('solution').text
                result_nvt_refs = result_nvt.find('refs')
                result_nvt_refs_ref = result_nvt_refs.findall('ref')
                result_nvt_refs_ref_type = result_nvt_refs_ref[0].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[0].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[1].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[1].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[2].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[2].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[3].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[3].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[4].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref[4].attrib['value']
                result_nvt_refs_ref_type = result_nvt_refs_ref[5].attrib['type']
                result_nvt_refs_ref_value = result_nvt_refs_ref

    def mongo_insert(self, data):
        client = MongoClient('mongodb://localhost:27017/')
        db = client['vulnmgt']
        collection = db['openvas']

        for item in data:
            db.hosts.update_one()
        client.close()


if __name__ == '__main__':
    openvas = OpenVAS('yorha', '8fc1760a-c52d-411c-b7cd-88380b79e060')







